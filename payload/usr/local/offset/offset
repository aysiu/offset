#!/usr/local/bin/managed_python3

'''
Run scripts and install pkgs at logout.
'''

##############################################################################
# Copyright 2016 aysiu but heavily, heavily based on code from Joseph Chilcote
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy
#  of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##############################################################################

__author__ = 'aysiu after Joseph Chilcote'
__version__ = '2.0.0'

import argparse
import logging
import os
import platform
import plistlib
import subprocess
import time
from stat import S_IXOTH, S_IWOTH


offset_dir = '/usr/local/offset'
logout_every_dir = os.path.join(offset_dir, 'logout-every')
loginwindow_preferences = '/Library/Preferences/com.apple.loginwindow.plist'
share_dir = os.path.join(offset_dir, 'share')
offset_preferences = os.path.join(share_dir, 'com.aysiu.offset.plist')

if os.geteuid() == 0:
    log_file = '/var/log/offset.log'
else:
    if not os.path.exists(os.path.expanduser('~/Library/Logs')):
        os.makedirs(os.path.expanduser('~/Library/Logs'))
    log_file = os.path.expanduser('~/Library/Logs/offset.log')

logging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',
                    datefmt='%m/%d/%Y %I:%M:%S %p',
                    level=logging.DEBUG,
                    filename=log_file)

def mount_dmg(dmg):
    '''Attaches dmg'''
    dmg_path = os.path.join(dmg)
    cmd = ['hdiutil', 'attach', '-nobrowse', '-noverify', '-noautoopen', dmg_path]
    logging.info(f'Attaching {dmg_path}')
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    return out.split('\n')[-2].split('\t')[-1]

def detach_dmg(dmg_mount):
    '''Detaches dmg'''
    logging.info(f'Detaching {dmg_mount}')
    cmd = ['hdiutil', 'detach', '-force', dmg_mount]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    if err:
        logging.error(f'Unable to detach {dmg_mount}: {err}')

def check_perms(pathname):
    mode = os.stat(pathname).st_mode
    owner = os.stat(pathname).st_uid
    if pathname.lower().endswith(('pkg', 'mpkg', 'dmg', 'mobileconfig')):
        if owner == 0 and not (mode & S_IWOTH):
            return True
    else:
        if owner == 0 and (mode & S_IXOTH) and not (mode & S_IWOTH):
            return True
    return False

def install_package(pkg):
    '''Installs pkg onto boot drive'''
    if pkg.lower().endswith('dmg'):
        dmg_mount = mount_dmg(pkg)
        for f in os.listdir(dmg_mount):
            if f.lower().endswith(('pkg', 'mpkg')):
                pkg_to_install = os.path.join(dmg_mount, f)
    elif pkg.lower().endswith(('pkg', 'mpkg')):
        dmg_mount = False
        pkg_to_install = pkg
    logging.info(f'Installing {pkg_to_install}')
    cmd = ['/usr/sbin/installer', '-pkg', pkg_to_install, '-target', '/',]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    if err:
        logging.info(f'Failure installing {pkg_to_install}: {err}')
    if dmg_mount:
        time.sleep(5)
        detach_dmg(dmg_mount)

def run_script(pathname):
    '''Runs script located at given pathname'''
    try:
        proc = subprocess.Popen(pathname, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logging.info(f'Processing {pathname}')
        (out, err) = proc.communicate()
        if err and proc.returncode == 0:
            logging.info(f'Output from {pathname} on stderr but it still ran successfully: {err}')
        elif proc.returncode > 0:
            logging.error(f'Failure processing {pathname}: {err}')
            return False
    except OSError as err:
        logging.error(f'Failure processing {pathname}: {err}')
        return False
    return True

def process_items(path, delete_items=False, once=False):
    '''Processes scripts/packages to run'''

    if not os.path.exists(path):
        logging.error(f'{path} does not exist. Exiting')
        exit(1)

    packages = []
    scripts = []
    profiles = []

    for f in os.listdir(path):
        pathname = os.path.join(path, f)
        if check_perms(pathname):
            if pathname.lower().endswith(('pkg', 'mpkg', 'dmg')):
                packages.append(pathname)
            elif pathname.lower().endswith('mobileconfig'):
                profiles.append(pathname)
            else:
                scripts.append(pathname)
        else:
            logging.error(f'Bad permissions: {pathname}')

    for package in packages:
        install_package(package)
        if delete_items: cleanup(package)

    for script in scripts:
        task = run_script(script)
        if delete_items: cleanup(script)

def main():
    # Get the version of macOS that's running
    mac_version=(platform.mac_ver()[0]).split('.')[1]
    
    '''Main method'''
    parser = argparse.ArgumentParser(description='This script automatically \
            processes packages and scripts at first boot \
            and/or each (subsequent) user login.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--logout', action='store_true')
    group.add_argument('--version', action='store_true')
    group.add_argument('--add-ignored-user', action='append',
            help='Add user to ignored list')
    group.add_argument('--remove-ignored-user', action='append',
            help='Remove user from ignored list')
    args = parser.parse_args()    
    ignored_users = []
    prefs = {}

    if not os.path.exists(share_dir):
        os.makedirs(share_dir)

    if os.path.exists(offset_preferences):
        try:
            prefs_file = open(offset_preferences, 'rb')
        except:
            logging.error(f"Can't open {offset_preferences}. Exiting")
            exit(1)
        try:
            prefs = plistlib.load(prefs_file)
        except:
            logging.error(f"Unable to read contents of {offset_preferences}. Exiting")
            exit(1)
        prefs_file.close()
        if prefs.get('ignored_users'):
            ignored_users = prefs['ignored_users']

    if args.logout:
        # Determine whether this is a logout or a straight reboot (as opposed to a reboot after a logout)
        getlasthead = 'last | head -n3'
        p = subprocess.Popen(getlasthead, shell=True, bufsize=0, stdout=subprocess.PIPE)
        p.wait()
        lasthead=p.stdout.read()
        p.stdout.close()
        lastheadlist = [x.split() for x in lasthead.split("\n")]

        ### We don't know if the line below reboot is going to be shutdown or a user, so we'll have to test both
        # If the second line is shutdown and the third line is not shutdown or reboot and the second line's start time is the same as the third line's end time... or if the second line is not shutdown or reboot and its end time is the same as the start time... 
        if((lastheadlist[0][0] != "reboot") or (lastheadlist[0][0] == "reboot" and lastheadlist[1][0] == "shutdown" and lastheadlist[2][0] != "reboot" and lastheadlist[2][0] != "shutdown" and lastheadlist[1][5] == lastheadlist[2][7]) or (lastheadlist[0][0] == "reboot" and lastheadlist[1][0] != "reboot" and lastheadlist[1][0] != "shutdown" and lastheadlist[0][5] == lastheadlist[1][7])):
            # Logout is really login window. Check both the  username and the last user state is 'loggedOut' or 'Restart'
            try:
                prefs_file = open(loginwindow_preferences, 'rb')
            except:
                logging.error(f"Can't open {loginwindow_preferences}. Exiting")
                exit(1)
            try:
                current_loginwindow = plistlib.load(prefs_file)
            except:
                logging.error(f"Unable to read contents of {loginwindow_preferences}. Exiting")
                exit(1)
            prefs_file.close()
            lastuser = current_loginwindow['lastUser']
            console_user = current_loginwindow['lastUserName']
            if (mac_version >= '13') or (lastuser == 'loggedOut') or (lastuser == 'Restart'):
                if console_user not in ignored_users:
                    if os.listdir(logout_every_dir):
                        process_items(logout_every_dir)
                    else:
                        logging.info(f'Skipping logout scripts, because user {console_user} is on the ignored user list')
            else:
                logging.info(f'Skipping logout scripts, because login state is {lastuser} and should be loggedOut or Restart')
        else:
            logging.info('Skipping logout scripts, because this is a reboot after a logout')

    if args.add_ignored_user:
        users_to_add = args.add_ignored_user
        if not prefs.get('ignored_users'):
            prefs['ignored_users'] = []
        prefs['ignored_users'].extend(users_to_add)
        try:
            prefs_file = open(offset_preferences, 'r+b')
        except:
            logging.error(f"Can't open {offset_preferences}. Exiting")
            exit(1)
        prefs_file.seek(0)
        prefs_file.truncate()
        try:
            plistlib.dump(prefs, offset_preferences)
        except:
            logging.error(f"Can't write changes back to {offset_preferences}. Exiting")
            exit(1)
        prefs_file.close()

    if args.remove_ignored_user:
        users_to_remove = args.remove_ignored_user
        if prefs.get('ignored_users'):
            for user in users_to_remove:
                if user in prefs['ignored_users']:
                    prefs['ignored_users'].remove(user)
            try:
                prefs_file = open(offset_preferences, 'r+b')
            except:
                logging.error(f"Can't open {offset_preferences}. Exiting")
                exit(1)
            prefs_file.seek(0)
            prefs_file.truncate()
            try:
                plistlib.dump(prefs, offset_preferences)
            except:
                logging.error(f"Can't write changes back to {offset_preferences}. Exiting")
                exit(1)
            prefs_file.close()

    if args.version:
        print(__version__)

if __name__ == '__main__':
    main()
