#!/usr/bin/python

'''
Run scripts and install pkgs or profiles at logout.
'''

##############################################################################
# Copyright 2016 aysiu but heavily, heavily based on code from Joseph Chilcote
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy
#  of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##############################################################################

__author__ = 'aysiu after Joseph Chilcote'
__version__ = '1.0.0'

import argparse
import datetime
import FoundationPlist
import logging
import os
import platform
import shutil
import subprocess
import time
from stat import S_IXOTH, S_IWOTH
from SystemConfiguration import SCDynamicStoreCopyConsoleUser


offset_dir = '/usr/local/offset'
logout_every_dir = os.path.join(offset_dir, 'logout-every')

if os.geteuid() == 0:
    log_file = '/var/log/offset.log'
else:
    if not os.path.exists(os.path.expanduser('~/Library/Logs')):
        os.makedirs(os.path.expanduser('~/Library/Logs'))
    log_file = os.path.expanduser('~/Library/Logs/offset.log')

logging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',
                    datefmt='%m/%d/%Y %I:%M:%S %p',
                    level=logging.DEBUG,
                    filename=log_file)

def mount_dmg(dmg):
    '''Attaches dmg'''
    dmg_path = os.path.join(dmg)
    cmd = ['hdiutil', 'attach', '-nobrowse', '-noverify', '-noautoopen', dmg_path]
    logging.info('Attaching %s', dmg_path)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    return out.split('\n')[-2].split('\t')[-1]

def detach_dmg(dmg_mount):
    '''Detaches dmg'''
    logging.info('Detaching %s', dmg_mount)
    cmd = ['hdiutil', 'detach', '-force', dmg_mount]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    if err:
        logging.error('Unable to detach %s: %s', dmg_mount, err)

def check_perms(pathname):
    mode = os.stat(pathname).st_mode
    owner = os.stat(pathname).st_uid
    if pathname.lower().endswith(('pkg', 'mpkg', 'dmg', 'mobileconfig')):
        if owner == 0 and not (mode & S_IWOTH):
            return True
    else:
        if owner == 0 and (mode & S_IXOTH) and not (mode & S_IWOTH):
            return True
    return False

def install_package(pkg):
    '''Installs pkg onto boot drive'''
    if pkg.lower().endswith('dmg'):
        dmg_mount = mount_dmg(pkg)
        for f in os.listdir(dmg_mount):
            if f.lower().endswith(('pkg', 'mpkg')):
                pkg_to_install = os.path.join(dmg_mount, f)
    elif pkg.lower().endswith(('pkg', 'mpkg')):
        dmg_mount = False
        pkg_to_install = pkg
    logging.info('Installing %s', pkg_to_install)
    cmd = ['/usr/sbin/installer', '-pkg', pkg_to_install, '-target', '/',]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    if err:
        logging.info('Failure installing %s: %s', pkg_to_install, err)
    if dmg_mount:
        time.sleep(5)
        detach_dmg(dmg_mount)

def install_profile(pathname):
    '''Install mobileconfig located at given pathname'''
    cmd = ['/usr/bin/profiles', '-IF', pathname]
    try:
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logging.info('Installing profile %s', pathname)
        (out, err) = proc.communicate()
        if err:
            logging.error('Failure processing %s: %s', pathname, err)
            return False
    except OSError as err:
        logging.error('Failure processing %s: %s', pathname, err)
        return False
    return True

def run_script(pathname):
    '''Runs script located at given pathname'''
    try:
        proc = subprocess.Popen(pathname, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logging.info('Processing %s', pathname)
        (out, err) = proc.communicate()
        if err and proc.returncode == 0:
            logging.info('Output from %s on stderr but it still ran successfully: %s', pathname, err)
        elif proc.returncode > 0:
            logging.error('Failure processing %s: %s', pathname, err)
            return False
    except OSError as err:
        logging.error('Failure processing %s: %s', pathname, err)
        return False
    return True

def process_items(path, delete_items=False, once=False):
    '''Processes scripts/packages to run'''

    if not os.path.exists(path):
        logging.error('%s does not exist. Exiting', path)
        exit(1)

    packages = []
    scripts = []
    profiles = []
    d = {}

    for f in os.listdir(path):
        pathname = os.path.join(path, f)
        if check_perms(pathname):
            if pathname.lower().endswith(('pkg', 'mpkg', 'dmg')):
                packages.append(pathname)
            elif pathname.lower().endswith('mobileconfig'):
                profiles.append(pathname)
            else:
                scripts.append(pathname)
        else:
            logging.error('Bad permissions: %s', pathname)

    for package in packages:
        install_package(package)
        if delete_items: cleanup(package)

    for profile in profiles:
        task = install_profile(profile)
        if delete_items: cleanup(profile)

    for script in scripts:
        task = run_script(script)
        if delete_items: cleanup(script)

    if d:
        FoundationPlist.writePlist(d, run_once_plist)

def main():
    '''Main method'''

    parser = argparse.ArgumentParser(description='This script automatically \
            processes packages and scripts at first boot \
            and/or each (subsequent) user login.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--logout', action='store_true')
    group.add_argument('--logout-every', action='store_true')
    args = parser.parse_args()

    if args.logout:
        if os.listdir(logout_every_dir):
            process_items(logout_every_dir)
        else:
            logging.info('Skipping logout scripts for user %s', console_user)

    if args.logout_every:
        if console_user not in ignored_users:
            if os.listdir(logout_every_dir):
                process_items(logout_every_dir)

if __name__ == '__main__':
    main()
